package main

import (
	"fmt"
	"math"
	"strings"
)

type sudoku struct {
	elems [][]int
	rows  [][]int
	cols  [][]int
}

func NewSudoku(inp string) *sudoku {
	s := new(sudoku)
	return s
}

func New(inp string) *sudoku {

	m := NewSudoku(inp)

	gridLength := int(math.Sqrt(float64(len(inp))))

	g := make([][]int, gridLength)
	for i := range g {
		g[i] = make([]int, gridLength)
	}

	rowSl := make([]string, gridLength)
	arr := []rune(inp)

	for row := 0; row < gridLength; row++ {
		startIndex := row * gridLength
		rowSl[row] = string(arr[startIndex : startIndex+9])
		colSl := []rune(rowSl[row])
		for col := 0; col < gridLength; col++ {
			g[row][col] = int(colSl[col]) - 48
		}
	}

	rows := make([][]int, gridLength)
	for row := 0; row < gridLength; row++ {
		rows[row] = g[row]
	}

	t := make([][]int, gridLength)
	for i := range t {
		t[i] = make([]int, gridLength)
	}
	for row := 0; row < gridLength; row++ {
		for col := 0; col < gridLength; col++ {
			t[col][row] = g[row][col]
		}
	}

	cols := make([][]int, gridLength)
	for row := 0; row < gridLength; row++ {
		cols[row] = t[row]
	}

	m.rows = rows
	m.cols = cols
	m.elems = g
	return m
}

func main() {
	// test := []int{1, 2, 3, 4, 5}
	// fmt.Println(test)
	inp := `003020600900305001001806400008102900700000008006708200002609500800203009005010300`
	p := New(inp)
	prettyPrint(p.rows)
	prettyPrint(p.cols)
	p.solve()
}

func isSolved(grid [][]int) bool {

	gridLength := len(grid)

	sumRow := make([]int, gridLength)
	sumCol := make([]int, gridLength)
	for row := 0; row < gridLength; row++ {
		for col := 0; col < gridLength; col++ {
			sumRow[row] += grid[row][col]
			sumCol[col] += grid[row][col]
		}
	}
	// fmt.Println(sumRow)
	// fmt.Println(sumCol)
	for i := 0; i < gridLength; i++ {
		if sumRow[i] != 45 || sumCol[i] != 45 {
			return false
		}
	}

	return true
}

func (p sudoku) solve() {

	grid := p.elems

	gridLength := len(grid)

	valuesToFillInRow := make([]int, gridLength)
	valuesToFillInCol := make([]int, gridLength)
	for row := 0; row < gridLength; row++ {
		for col := 0; col < gridLength; col++ {
			if grid[row][col] == 0 {
				valuesToFillInRow[row]++
				valuesToFillInCol[col]++
			}

		}
	}
	fmt.Println(valuesToFillInRow)
	fmt.Println(valuesToFillInCol)
	// for i := 0; i < gridLength; i++ {
	// 	if sumRow[i] != 45 || sumCol[i] != 45 {
	// 		return false
	// 	}
	// }

	// return true
}

func printSubgrids(grid [][]int) {

	// gridLength := len(grid)

}

func genGrid(inp string) [][]int {

	gridLength := int(math.Sqrt(float64(len(inp))))

	g := make([][]int, gridLength)
	for i := range g {
		g[i] = make([]int, gridLength)
	}

	rowSl := make([]string, gridLength)
	arr := []rune(inp)

	for row := 0; row < gridLength; row++ {
		startIndex := row * gridLength
		rowSl[row] = string(arr[startIndex : startIndex+9])
		colSl := []rune(rowSl[row])
		for col := 0; col < gridLength; col++ {
			g[row][col] = int(colSl[col]) - 48
		}
	}

	return g

}

func prettyPrint(g [][]int) {

	gridLength := len(g)
	fmt.Printf("\n%v\n", strings.Repeat("-", 27))
	for row := 0; row < gridLength; row++ {
		fmt.Printf("| ")
		for col := 0; col < gridLength; col++ {
			fmt.Printf("%d ", g[row][col])
			if (col+1)%3 == 0 {
				fmt.Printf("| ")
			}
		}
		if (row+1)%3 == 0 {
			fmt.Printf("\n%v\n", strings.Repeat("-", 27))
		} else {
			fmt.Printf("\n")
		}
	}

}
